-- 1. Find the total revenue generated by each order.
SELECT o.id AS order_id, SUM(od.total) AS total_revenue
FROM Orders o
JOIN Order_Details od ON o.id = od.order_id
GROUP BY o.id;

-- 2. List customers who have spent more than $1000 in total across all orders.
SELECT c.id, c.name, SUM(od.total) AS total_spent
FROM Customers c
JOIN Orders o ON c.id = o.customer_id
JOIN Order_Details od ON o.id = od.order_id
GROUP BY c.id, c.name
HAVING SUM(od.total) > 1000;

-- 3. Identify the product with the most revenue generated.
SELECT p.id, p.name, SUM(od.total) AS total_revenue
FROM Products p
JOIN Order_Details od ON p.id = od.product_id
GROUP BY p.id, p.name
ORDER BY total_revenue DESC
LIMIT 1;

-- 4. Rank customers based on their total purchases.
SELECT c.id, c.name, SUM(od.total) AS total_spent,
       RANK() OVER (ORDER BY SUM(od.total) DESC) AS rank
FROM Customers c
JOIN Orders o ON c.id = o.customer_id
JOIN Order_Details od ON o.id = od.order_id
GROUP BY c.id, c.name;

-- 5. Find all orders placed in the last 30 days.
SELECT *
FROM Orders
WHERE order_date >= CURDATE() - INTERVAL 30 DAY;

-- 6. Find orders that include more than 5 items (quantity-wise).
SELECT o.id AS order_id, SUM(od.quantity) AS total_quantity
FROM Orders o
JOIN Order_Details od ON o.id = od.order_id
GROUP BY o.id
HAVING SUM(od.quantity) > 5;

-- 7. List the top 3 products by quantity sold.
SELECT p.id, p.name, SUM(od.quantity) AS total_quantity
FROM Products p
JOIN Order_Details od ON p.id = od.product_id
GROUP BY p.id, p.name
ORDER BY total_quantity DESC
LIMIT 3;

-- 8. Find customers who have not placed an order since a given date.
SELECT c.*
FROM Customers c
LEFT JOIN Orders o ON c.id = o.customer_id
WHERE o.id IS NULL OR o.order_date < '2023-01-01';

-- 9. Find pending or processing orders with at least one "out of stock" product.
SELECT o.id AS order_id, p.name AS product_name, p.inventory
FROM Orders o
JOIN Order_Details od ON o.id = od.order_id
JOIN Products p ON od.product_id = p.id
WHERE o.status IN ('Processing', 'Pending')
  AND p.inventory < od.quantity;

-- 10. Calculate the total revenue grouped by order status.
SELECT o.status, SUM(od.total) AS total_revenue
FROM Orders o
JOIN Order_Details od ON o.id = od.order_id
GROUP BY o.status
ORDER BY total_revenue DESC;